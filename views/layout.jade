doctype
html
  head
    title bottleuck
    // Viewport mobile tag for sensible mobile support
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    link(rel='stylesheet', href='//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css')
    link(rel='stylesheet', href='//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css')
    //
              Stylesheets and Preprocessors
              ==============================
              You can always bring in CSS files manually with `<link>` tags, or asynchronously
              using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
              of Sails' conventional asset pipeline (boilerplate Gruntfile).
              By default, stylesheets from your `assets/styles` folder are included
              here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
              are supported. In production, your styles will be minified and concatenated into
              a single file.
              To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
              For example, here are a few things you could do:
                  + Change the order of your CSS files
                  + Import stylesheets from other directories
                  + Use a different or additional preprocessor, like SASS, SCSS or Stylus

    // STYLES
    link(rel="stylesheet", href="/styles/importer.css")
    // STYLES END
  body
    nav.navbar.navbar-default(role='navigation')
      .container-fluid
        .navbar-header
          - if(req.user)
            button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#header-menu')
              span.sr-only Toggle navigation
              i.fa.fa-bars
          a.navbar-brand(href='/')
            | bottleuck&nbsp;
            i.fa.fa-spin.fa-circle-o-notch.js-loading.hidden
        #header-menu.collapse.navbar-collapse
          #header-menu.collapse.navbar-collapse
            - if(req.user)
              ul.nav.navbar-nav.navbar-right.navbar-user-profile
                li.dropdown
                  img.avatar(src="#{req.user.raw.avatar_url}")
                  a.dropdown-toggle(href="#", data-toggle="dropdown")
                    | #{req.user.name}
                    span.caret
                  ul.dropdown-menu(role="menu")
                    li
                      a(href="/logout")
                        i.fa.fa-sign-out
                        |&nbsp; Logout
    .container-fluid
      block content
    //
      Client-side Templates
      ========================
      HTML templates are important prerequisites of modern, rich client applications.
      To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
      that you load these templates client-side.
      By default, your Gruntfile is configured to automatically load and precompile
      client-side JST templates in your `assets/templates` folder, then
      include them here automatically (between TEMPLATES and TEMPLATES END).
      To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          + Import templates from other directories
          + Use a different template engine (handlebars, jade, dust, etc.)
          + Internationalize your client-side templates using a server-side
            stringfile before they're served.

    // TEMPLATES
    script(type="text/javascript", src="/jst.js")
    // TEMPLATES END
    //
      Client-side Javascript
      ========================
      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    // SCRIPTS
    script(src="/js/dependencies/sails.io.js")
    script(src="/linker/bower_components/underscore/underscore.js")
    script(src="/linker/bower_components/jquery/dist/jquery.js")
    script(src="/linker/bower_components/backbone/backbone.js")
    script(src="/linker/bower_components/backbone.marionette/lib/backbone.marionette.js")
    script(src="/linker/bower_components/moment/min/moment.min.js")
    script(src="/linker/bower_components/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js")
    script(src="/js/app.js")
    script(src="/js/controllers/event-dashboard.js")
    script(src="/js/controllers/user-profile.js")
    script(src="/js/dumb-view.js")
    script(src="/js/events-list.js")
    script(src="/js/models.js")
    script(src="/js/participants-list.js")
    // SCRIPTS END
    script(src='//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js')
    block scripts
    script
      | (function($) {
      |   $(function() {
      |     app.start();
      |   });
      | })(jQuery);
